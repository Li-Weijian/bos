package com.liweijian.bos.web.action;

import com.liweijian.bos.domain.Region;
import com.liweijian.bos.domain.Subarea;
import com.liweijian.bos.service.SubareaService;
import com.liweijian.bos.utils.FileUtils;
import com.liweijian.bos.web.action.base.IBaseAction;
import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.struts2.ServletActionContext;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;

import javax.servlet.ServletOutputStream;
import java.util.List;

/**
 * @Author:Liweijian
 * @Description:
 * @Date:Create in 11:01 2018/3/12 0012
 */
@Controller
public class SubareaAction extends IBaseAction<Subarea> {

    @Autowired
    private SubareaService subareaService;


    /**
     * 保存分区
     * */
    public String save() throws Exception {

        subareaService.save(model);
        return LIST;
    }


    /**
     * 分页查询
     * */
    public String quaryPage() throws Exception {

        //组合查询条件
        DetachedCriteria detachedCriteria = pageBean.getDetachedCriteria();
        String addresskey = model.getAddresskey();
        if (StringUtils.isNotBlank(addresskey)){
            detachedCriteria.add(Restrictions.like("addresskey","%"+addresskey+"%"));
        }
        Region region = model.getRegion();
        if (region != null){
            String province = region.getProvince();
            String city = region.getCity();
            String district = region.getDistrict();
            //创建别名
            //直接在查询条件中使用r.province是无法解析的，因此必须要创建一个别名
            detachedCriteria.createAlias("region","r");
            if (StringUtils.isNotBlank(province)){
                detachedCriteria.add(Restrictions.like("r.province","%"+province+"%"));
            }
            if (StringUtils.isNotBlank(city)){
                detachedCriteria.add(Restrictions.like("r.city","%"+city+"%"));
            }
            if (StringUtils.isNotBlank(district)){
                detachedCriteria.add(Restrictions.like("r.district","%"+district+"%"));
            }
        }

        //查询
        subareaService.quaryPage(pageBean);
        this.java2Json(pageBean,new String[]{"subareas"});
        return NONE;
    }


    /**
     * 导出Excel
     * */
    public String exportXls() throws Exception {

        //创建表格文件
        HSSFWorkbook workbook = new HSSFWorkbook();
        //创建工作簿
        HSSFSheet sheet = workbook.createSheet("分区数据");
        HSSFRow headRow = sheet.createRow(0);
        headRow.createCell(0).setCellValue("Id");
        headRow.createCell(1).setCellValue("省");
        headRow.createCell(2).setCellValue("市");
        headRow.createCell(3).setCellValue("区");
        headRow.createCell(4).setCellValue("关键字");
        headRow.createCell(5).setCellValue("位置");


        List<Subarea> subareaList = subareaService.findAll();
        for (Subarea subarea : subareaList) {
            HSSFRow row = sheet.createRow(sheet.getLastRowNum() + 1);
            row.createCell(0).setCellValue(subarea.getId());
            row.createCell(1).setCellValue(subarea.getRegion().getProvince());
            row.createCell(2).setCellValue(subarea.getRegion().getCity());
            row.createCell(3).setCellValue(subarea.getRegion().getDistrict());
            row.createCell(4).setCellValue(subarea.getAddresskey());
            row.createCell(5).setCellValue(subarea.getPosition());
        }


        //使用输出流进行文件下载（一个流两个头）
        ServletOutputStream outputStream = ServletActionContext.getResponse().getOutputStream();

        //自动根据文件后缀名识别ContentType
        String filename = "分区数据.xls";
        String mimeType = ServletActionContext.getServletContext().getMimeType(filename);
        ServletActionContext.getResponse().setContentType(mimeType);

        //根据不同浏览器进行转码
        String header = ServletActionContext.getRequest().getHeader("user-Agent");
        filename = FileUtils.encodeDownloadFilename(filename, header);
        ServletActionContext.getResponse().setHeader("content-disposition", "attachment;filename="+filename);

        workbook.write(outputStream);
        return NONE;
    }
}
